// Generated by Selenium IDE
const { Builder} = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const {LockToken, LockNative, UnlockToken, UnlockNative} = require('./common');

let opts = new chrome.Options();

const {Login} = require("../utils/index");

describe('ERC20', function() {
  this.timeout(100000)
  let driver
  let vars
  before(async function() {
    driver = await new Builder().forBrowser('chrome').setChromeOptions(opts.headless()).build()
    vars = {}
  })
  after(async function() {
    await driver.quit();
  })

  //ABNORMAL & NORMAL CASES
  //address, driver, handle, Login, ConfirmMetamask, ConnectMetamask, SwitchNetwork, network, id
  it('Abnormal: Lock Native token 1st time for wrong address', async function() {
    await LockNative("Error!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d9", driver, null, Login, null, null, null, "MBC", "0.00001");
  })

  it('Abnormal: Lock Native token 1st time for wrong amount', async function() {
    await LockNative("Error!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "MBC", "1");
  })
  
  it('Normal: Lock Native token 1st time', async function() {
    await LockNative("Success!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "MBC", "0.00001");
  })

  it('Abnormal: Unlock ERC20 1st time for wrong address', async function() {
    await UnlockToken("Error!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d9", driver, null, Login, null, null, null, "AGD", "0.00001");
  })

  it('Abnormal: Unlock ERC20 1st time for wrong amount', async function() {
    await UnlockToken("Error!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "AGD", "1");
  })

  it('Normal: Unlock ERC20 1st time', async function() {
    await UnlockToken("Success!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "AGD", "0.00001");
  })

  it('Abnormal: Lock ERC20 1st time for wrong address', async function() {
    await LockToken("Error!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d9", driver, null, Login, null, null, null, "AGD", "0.00001");
  })

  it('Abnormal: Lock ERC20 1st time for wrong address', async function() {
    await LockToken("Error!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "AGD", "1");
  })
  
  it('Normal: Lock ERC20 1st time', async function() {
    await LockToken("Success!", "ERC20", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "AGD", "0.00001");
  })

  it('Abnormal: Unlock Native token 1st time for wrong address', async function() {
    await UnlockNative("Error!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d9", driver, null, Login, null, null, null, "MBC", "0.00001");
  })

  it('Abnormal: Unlock Native token 1st time for wrong amount', async function() {
    await UnlockNative("Error!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "MBC", "1");
  })
  
  it('Normal: Unlock Native token 1st time', async function() {
    await UnlockNative("Success!", "0xC3DDDE3D73927C503632ff13f9C6D8B20D67c2d8", driver, null, Login, null, null, null, "MBC", "0.00001");
  })  

})
